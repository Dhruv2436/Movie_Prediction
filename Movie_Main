# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt

# Load the dataset
data = pd.read_csv("Movie_Predication\movie_metadata.csv")

# Define the target variable 'imdb_binned' as the label to predict
bins = [1, 3, 6, 10]
labels = ['FLOP', 'AVG', 'HIT']
data['imdb_binned'] = pd.cut(data['imdb_score'], bins=bins, labels=labels)
y = data['imdb_binned']

# Define the features for prediction
X = data[['imdb_score', 'duration', 'num_critic_for_reviews', 'director_facebook_likes',
          'actor_3_facebook_likes', 'actor_1_facebook_likes', 'gross', 'num_voted_users',
          'cast_total_facebook_likes', 'facenumber_in_poster', 'num_user_for_reviews',
          'budget', 'actor_2_facebook_likes', 'aspect_ratio', 'movie_facebook_likes']]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)

# Remove missing values from training data
X_train = X_train.dropna()
y_train = y_train[X_train.index]

# Remove missing values from testing data
X_test = X_test.dropna()
y_test = y_test[X_test.index]

# Create and train the KNN model
model = KNeighborsClassifier(n_neighbors=3)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Visualize the distribution of movie success in the test set
success_counts = pd.Series(y_test).value_counts().reindex(labels)
success_counts.plot(kind='bar', color='skyblue')
plt.title('Distribution of Movie Success in Test Set')
plt.xlabel('Movie Success')
plt.ylabel('Count')
plt.show()

# Evaluate the model
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred, zero_division=0))

# Predict movie success for specific IMDb scores
imdb_scores_to_predict = np.array([
    [5.0, 236.0, 45.0, 564.0, 45.0, 205.0, 119.0, 372.0, 42.0, 315.0, 148.0, 289.0, 99.0, 73.0, 177.0]
])
predicted_success = model.predict(imdb_scores_to_predict)
print("\nPredicted movie success for IMDb scores:", predicted_success)

# Create a bar chart for the entire dataset
full_dataset_success_counts = data['imdb_binned'].value_counts().reindex(labels)
full_dataset_success_counts.plot(kind='bar', color='lightcoral')
plt.title('Distribution of Movie Success in Entire Dataset')
plt.xlabel('Movie Success')
plt.ylabel('Count')
plt.show()
